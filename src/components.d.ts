/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MainBtn {
    }
    interface MyComponent {
        "first": string;
        "last": string;
        "middle": string;
    }
    interface PrimaryBtn {
        "btnText": string;
        "btndisabled": boolean;
        "imagesrc": string;
        "plusicon": boolean;
        "text": string;
    }
    interface RadioInput {
        "labelfor": string;
        "labeltitle": string;
        "radiodisabled": boolean;
    }
    interface RcsActions {
        "actions": string;
        "description": string;
        "title": string;
    }
}
export interface RcsActionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRcsActionsElement;
}
declare global {
    interface HTMLMainBtnElement extends Components.MainBtn, HTMLStencilElement {
    }
    var HTMLMainBtnElement: {
        prototype: HTMLMainBtnElement;
        new (): HTMLMainBtnElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPrimaryBtnElement extends Components.PrimaryBtn, HTMLStencilElement {
    }
    var HTMLPrimaryBtnElement: {
        prototype: HTMLPrimaryBtnElement;
        new (): HTMLPrimaryBtnElement;
    };
    interface HTMLRadioInputElement extends Components.RadioInput, HTMLStencilElement {
    }
    var HTMLRadioInputElement: {
        prototype: HTMLRadioInputElement;
        new (): HTMLRadioInputElement;
    };
    interface HTMLRcsActionsElementEventMap {
        "actionClick": string;
    }
    interface HTMLRcsActionsElement extends Components.RcsActions, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRcsActionsElementEventMap>(type: K, listener: (this: HTMLRcsActionsElement, ev: RcsActionsCustomEvent<HTMLRcsActionsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRcsActionsElementEventMap>(type: K, listener: (this: HTMLRcsActionsElement, ev: RcsActionsCustomEvent<HTMLRcsActionsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRcsActionsElement: {
        prototype: HTMLRcsActionsElement;
        new (): HTMLRcsActionsElement;
    };
    interface HTMLElementTagNameMap {
        "main-btn": HTMLMainBtnElement;
        "my-component": HTMLMyComponentElement;
        "primary-btn": HTMLPrimaryBtnElement;
        "radio-input": HTMLRadioInputElement;
        "rcs-actions": HTMLRcsActionsElement;
    }
}
declare namespace LocalJSX {
    interface MainBtn {
    }
    interface MyComponent {
        "first"?: string;
        "last"?: string;
        "middle"?: string;
    }
    interface PrimaryBtn {
        "btnText"?: string;
        "btndisabled"?: boolean;
        "imagesrc"?: string;
        "plusicon"?: boolean;
        "text"?: string;
    }
    interface RadioInput {
        "labelfor"?: string;
        "labeltitle"?: string;
        "radiodisabled"?: boolean;
    }
    interface RcsActions {
        "actions"?: string;
        "description"?: string;
        "onActionClick"?: (event: RcsActionsCustomEvent<string>) => void;
        "title"?: string;
    }
    interface IntrinsicElements {
        "main-btn": MainBtn;
        "my-component": MyComponent;
        "primary-btn": PrimaryBtn;
        "radio-input": RadioInput;
        "rcs-actions": RcsActions;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "main-btn": LocalJSX.MainBtn & JSXBase.HTMLAttributes<HTMLMainBtnElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "primary-btn": LocalJSX.PrimaryBtn & JSXBase.HTMLAttributes<HTMLPrimaryBtnElement>;
            "radio-input": LocalJSX.RadioInput & JSXBase.HTMLAttributes<HTMLRadioInputElement>;
            "rcs-actions": LocalJSX.RcsActions & JSXBase.HTMLAttributes<HTMLRcsActionsElement>;
        }
    }
}
