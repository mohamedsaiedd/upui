/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface GrayOutlinedBtn {
        "btndisabled": boolean;
        "imagesrc": string;
        "plusicon": boolean;
        "text": string;
    }
    interface MainBtn {
    }
    interface MyChip {
        "removable"?: boolean;
        "selected"?: boolean;
        "size"?: 'small' | 'medium' | 'large';
        "text": string;
    }
    interface MyComponent {
        "first": string;
        "last": string;
        "middle": string;
    }
    interface PrimaryBtn {
        "btndisabled": boolean;
        "imagesrc": string;
        "plusicon": boolean;
        "text": string;
    }
    interface PrimaryNoBorderBtn {
        "btndisabled": boolean;
        "imagesrc": string;
        "plusicon": boolean;
        "text": string;
    }
    interface RadioInput {
        "labelfor": string;
        "labeltitle": string;
        "radiodisabled": boolean;
    }
    interface RcsActions {
        "actions": string;
        "description": string;
    }
    interface SecondaryBtn {
        "btndisabled": boolean;
        "imagesrc": string;
        "plusicon": boolean;
        "text": string;
    }
    interface SecondaryNoBorderBtn {
        "btndisabled": boolean;
        "imagesrc": string;
        "plusicon": boolean;
        "text": string;
    }
    interface UpuiChip {
        "removable"?: boolean;
        "selected"?: boolean;
        "size"?: 'small' | 'medium' | 'large';
        "text": string;
    }
}
export interface MyChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyChipElement;
}
export interface RcsActionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRcsActionsElement;
}
export interface UpuiChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUpuiChipElement;
}
declare global {
    interface HTMLGrayOutlinedBtnElement extends Components.GrayOutlinedBtn, HTMLStencilElement {
    }
    var HTMLGrayOutlinedBtnElement: {
        prototype: HTMLGrayOutlinedBtnElement;
        new (): HTMLGrayOutlinedBtnElement;
    };
    interface HTMLMainBtnElement extends Components.MainBtn, HTMLStencilElement {
    }
    var HTMLMainBtnElement: {
        prototype: HTMLMainBtnElement;
        new (): HTMLMainBtnElement;
    };
    interface HTMLMyChipElementEventMap {
        "chipClick": void;
        "chipRemove": void;
    }
    interface HTMLMyChipElement extends Components.MyChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyChipElementEventMap>(type: K, listener: (this: HTMLMyChipElement, ev: MyChipCustomEvent<HTMLMyChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyChipElementEventMap>(type: K, listener: (this: HTMLMyChipElement, ev: MyChipCustomEvent<HTMLMyChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyChipElement: {
        prototype: HTMLMyChipElement;
        new (): HTMLMyChipElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPrimaryBtnElement extends Components.PrimaryBtn, HTMLStencilElement {
    }
    var HTMLPrimaryBtnElement: {
        prototype: HTMLPrimaryBtnElement;
        new (): HTMLPrimaryBtnElement;
    };
    interface HTMLPrimaryNoBorderBtnElement extends Components.PrimaryNoBorderBtn, HTMLStencilElement {
    }
    var HTMLPrimaryNoBorderBtnElement: {
        prototype: HTMLPrimaryNoBorderBtnElement;
        new (): HTMLPrimaryNoBorderBtnElement;
    };
    interface HTMLRadioInputElement extends Components.RadioInput, HTMLStencilElement {
    }
    var HTMLRadioInputElement: {
        prototype: HTMLRadioInputElement;
        new (): HTMLRadioInputElement;
    };
    interface HTMLRcsActionsElementEventMap {
        "actionClick": string;
    }
    interface HTMLRcsActionsElement extends Components.RcsActions, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRcsActionsElementEventMap>(type: K, listener: (this: HTMLRcsActionsElement, ev: RcsActionsCustomEvent<HTMLRcsActionsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRcsActionsElementEventMap>(type: K, listener: (this: HTMLRcsActionsElement, ev: RcsActionsCustomEvent<HTMLRcsActionsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRcsActionsElement: {
        prototype: HTMLRcsActionsElement;
        new (): HTMLRcsActionsElement;
    };
    interface HTMLSecondaryBtnElement extends Components.SecondaryBtn, HTMLStencilElement {
    }
    var HTMLSecondaryBtnElement: {
        prototype: HTMLSecondaryBtnElement;
        new (): HTMLSecondaryBtnElement;
    };
    interface HTMLSecondaryNoBorderBtnElement extends Components.SecondaryNoBorderBtn, HTMLStencilElement {
    }
    var HTMLSecondaryNoBorderBtnElement: {
        prototype: HTMLSecondaryNoBorderBtnElement;
        new (): HTMLSecondaryNoBorderBtnElement;
    };
    interface HTMLUpuiChipElementEventMap {
        "chipClick": void;
        "chipRemove": void;
    }
    interface HTMLUpuiChipElement extends Components.UpuiChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUpuiChipElementEventMap>(type: K, listener: (this: HTMLUpuiChipElement, ev: UpuiChipCustomEvent<HTMLUpuiChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUpuiChipElementEventMap>(type: K, listener: (this: HTMLUpuiChipElement, ev: UpuiChipCustomEvent<HTMLUpuiChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUpuiChipElement: {
        prototype: HTMLUpuiChipElement;
        new (): HTMLUpuiChipElement;
    };
    interface HTMLElementTagNameMap {
        "gray-outlined-btn": HTMLGrayOutlinedBtnElement;
        "main-btn": HTMLMainBtnElement;
        "my-chip": HTMLMyChipElement;
        "my-component": HTMLMyComponentElement;
        "primary-btn": HTMLPrimaryBtnElement;
        "primary-no-border-btn": HTMLPrimaryNoBorderBtnElement;
        "radio-input": HTMLRadioInputElement;
        "rcs-actions": HTMLRcsActionsElement;
        "secondary-btn": HTMLSecondaryBtnElement;
        "secondary-no-border-btn": HTMLSecondaryNoBorderBtnElement;
        "upui-chip": HTMLUpuiChipElement;
    }
}
declare namespace LocalJSX {
    interface GrayOutlinedBtn {
        "btndisabled"?: boolean;
        "imagesrc"?: string;
        "plusicon"?: boolean;
        "text"?: string;
    }
    interface MainBtn {
    }
    interface MyChip {
        "onChipClick"?: (event: MyChipCustomEvent<void>) => void;
        "onChipRemove"?: (event: MyChipCustomEvent<void>) => void;
        "removable"?: boolean;
        "selected"?: boolean;
        "size"?: 'small' | 'medium' | 'large';
        "text": string;
    }
    interface MyComponent {
        "first"?: string;
        "last"?: string;
        "middle"?: string;
    }
    interface PrimaryBtn {
        "btndisabled"?: boolean;
        "imagesrc"?: string;
        "plusicon"?: boolean;
        "text"?: string;
    }
    interface PrimaryNoBorderBtn {
        "btndisabled"?: boolean;
        "imagesrc"?: string;
        "plusicon"?: boolean;
        "text"?: string;
    }
    interface RadioInput {
        "labelfor"?: string;
        "labeltitle"?: string;
        "radiodisabled"?: boolean;
    }
    interface RcsActions {
        "actions"?: string;
        "description"?: string;
        "onActionClick"?: (event: RcsActionsCustomEvent<string>) => void;
    }
    interface SecondaryBtn {
        "btndisabled"?: boolean;
        "imagesrc"?: string;
        "plusicon"?: boolean;
        "text"?: string;
    }
    interface SecondaryNoBorderBtn {
        "btndisabled"?: boolean;
        "imagesrc"?: string;
        "plusicon"?: boolean;
        "text"?: string;
    }
    interface UpuiChip {
        "onChipClick"?: (event: UpuiChipCustomEvent<void>) => void;
        "onChipRemove"?: (event: UpuiChipCustomEvent<void>) => void;
        "removable"?: boolean;
        "selected"?: boolean;
        "size"?: 'small' | 'medium' | 'large';
        "text": string;
    }
    interface IntrinsicElements {
        "gray-outlined-btn": GrayOutlinedBtn;
        "main-btn": MainBtn;
        "my-chip": MyChip;
        "my-component": MyComponent;
        "primary-btn": PrimaryBtn;
        "primary-no-border-btn": PrimaryNoBorderBtn;
        "radio-input": RadioInput;
        "rcs-actions": RcsActions;
        "secondary-btn": SecondaryBtn;
        "secondary-no-border-btn": SecondaryNoBorderBtn;
        "upui-chip": UpuiChip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gray-outlined-btn": LocalJSX.GrayOutlinedBtn & JSXBase.HTMLAttributes<HTMLGrayOutlinedBtnElement>;
            "main-btn": LocalJSX.MainBtn & JSXBase.HTMLAttributes<HTMLMainBtnElement>;
            "my-chip": LocalJSX.MyChip & JSXBase.HTMLAttributes<HTMLMyChipElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "primary-btn": LocalJSX.PrimaryBtn & JSXBase.HTMLAttributes<HTMLPrimaryBtnElement>;
            "primary-no-border-btn": LocalJSX.PrimaryNoBorderBtn & JSXBase.HTMLAttributes<HTMLPrimaryNoBorderBtnElement>;
            "radio-input": LocalJSX.RadioInput & JSXBase.HTMLAttributes<HTMLRadioInputElement>;
            "rcs-actions": LocalJSX.RcsActions & JSXBase.HTMLAttributes<HTMLRcsActionsElement>;
            "secondary-btn": LocalJSX.SecondaryBtn & JSXBase.HTMLAttributes<HTMLSecondaryBtnElement>;
            "secondary-no-border-btn": LocalJSX.SecondaryNoBorderBtn & JSXBase.HTMLAttributes<HTMLSecondaryNoBorderBtnElement>;
            "upui-chip": LocalJSX.UpuiChip & JSXBase.HTMLAttributes<HTMLUpuiChipElement>;
        }
    }
}
